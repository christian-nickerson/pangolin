// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.5.1
// - protoc             v3.12.4
// source: transformers.proto

package pangolin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.64.0 or later.
const _ = grpc.SupportPackageIsVersion9

const (
	SentenceTransformers_Inference_FullMethodName = "/EmbeddingService.SentenceTransformers/Inference"
	SentenceTransformers_ModelList_FullMethodName = "/EmbeddingService.SentenceTransformers/ModelList"
)

// SentenceTransformersClient is the client API for SentenceTransformers service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type SentenceTransformersClient interface {
	// Inference an embedding model
	Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error)
	// Model list
	ModelList(ctx context.Context, in *ModelListRequest, opts ...grpc.CallOption) (*ModelListResponse, error)
}

type sentenceTransformersClient struct {
	cc grpc.ClientConnInterface
}

func NewSentenceTransformersClient(cc grpc.ClientConnInterface) SentenceTransformersClient {
	return &sentenceTransformersClient{cc}
}

func (c *sentenceTransformersClient) Inference(ctx context.Context, in *InferenceRequest, opts ...grpc.CallOption) (*InferenceResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(InferenceResponse)
	err := c.cc.Invoke(ctx, SentenceTransformers_Inference_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *sentenceTransformersClient) ModelList(ctx context.Context, in *ModelListRequest, opts ...grpc.CallOption) (*ModelListResponse, error) {
	cOpts := append([]grpc.CallOption{grpc.StaticMethod()}, opts...)
	out := new(ModelListResponse)
	err := c.cc.Invoke(ctx, SentenceTransformers_ModelList_FullMethodName, in, out, cOpts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// SentenceTransformersServer is the server API for SentenceTransformers service.
// All implementations must embed UnimplementedSentenceTransformersServer
// for forward compatibility.
type SentenceTransformersServer interface {
	// Inference an embedding model
	Inference(context.Context, *InferenceRequest) (*InferenceResponse, error)
	// Model list
	ModelList(context.Context, *ModelListRequest) (*ModelListResponse, error)
	mustEmbedUnimplementedSentenceTransformersServer()
}

// UnimplementedSentenceTransformersServer must be embedded to have
// forward compatible implementations.
//
// NOTE: this should be embedded by value instead of pointer to avoid a nil
// pointer dereference when methods are called.
type UnimplementedSentenceTransformersServer struct{}

func (UnimplementedSentenceTransformersServer) Inference(context.Context, *InferenceRequest) (*InferenceResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Inference not implemented")
}
func (UnimplementedSentenceTransformersServer) ModelList(context.Context, *ModelListRequest) (*ModelListResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method ModelList not implemented")
}
func (UnimplementedSentenceTransformersServer) mustEmbedUnimplementedSentenceTransformersServer() {}
func (UnimplementedSentenceTransformersServer) testEmbeddedByValue()                              {}

// UnsafeSentenceTransformersServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to SentenceTransformersServer will
// result in compilation errors.
type UnsafeSentenceTransformersServer interface {
	mustEmbedUnimplementedSentenceTransformersServer()
}

func RegisterSentenceTransformersServer(s grpc.ServiceRegistrar, srv SentenceTransformersServer) {
	// If the following call pancis, it indicates UnimplementedSentenceTransformersServer was
	// embedded by pointer and is nil.  This will cause panics if an
	// unimplemented method is ever invoked, so we test this at initialization
	// time to prevent it from happening at runtime later due to I/O.
	if t, ok := srv.(interface{ testEmbeddedByValue() }); ok {
		t.testEmbeddedByValue()
	}
	s.RegisterService(&SentenceTransformers_ServiceDesc, srv)
}

func _SentenceTransformers_Inference_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(InferenceRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentenceTransformersServer).Inference(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentenceTransformers_Inference_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentenceTransformersServer).Inference(ctx, req.(*InferenceRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _SentenceTransformers_ModelList_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ModelListRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(SentenceTransformersServer).ModelList(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: SentenceTransformers_ModelList_FullMethodName,
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(SentenceTransformersServer).ModelList(ctx, req.(*ModelListRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// SentenceTransformers_ServiceDesc is the grpc.ServiceDesc for SentenceTransformers service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var SentenceTransformers_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "EmbeddingService.SentenceTransformers",
	HandlerType: (*SentenceTransformersServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Inference",
			Handler:    _SentenceTransformers_Inference_Handler,
		},
		{
			MethodName: "ModelList",
			Handler:    _SentenceTransformers_ModelList_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "transformers.proto",
}
